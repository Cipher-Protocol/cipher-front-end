/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type RelayerInfoStruct = {
  registeredAddr: PromiseOrValue<string>;
  feeReceiver: PromiseOrValue<string>;
  feeRate: PromiseOrValue<BigNumberish>;
};

export type RelayerInfoStructOutput = [string, string, number] & {
  registeredAddr: string;
  feeReceiver: string;
  feeRate: number;
};

export type PublicSignalsStruct = {
  root: PromiseOrValue<BigNumberish>;
  publicInAmt: PromiseOrValue<BigNumberish>;
  publicOutAmt: PromiseOrValue<BigNumberish>;
  publicInfoHash: PromiseOrValue<BigNumberish>;
  inputNullifiers: PromiseOrValue<BigNumberish>[];
  outputCommitments: PromiseOrValue<BigNumberish>[];
};

export type PublicSignalsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber[],
  BigNumber[]
] & {
  root: BigNumber;
  publicInAmt: BigNumber;
  publicOutAmt: BigNumber;
  publicInfoHash: BigNumber;
  inputNullifiers: BigNumber[];
  outputCommitments: BigNumber[];
};

export type ProofStruct = {
  a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  b: [
    [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ];
  c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  publicSignals: PublicSignalsStruct;
};

export type ProofStructOutput = [
  [BigNumber, BigNumber],
  [[BigNumber, BigNumber], [BigNumber, BigNumber]],
  [BigNumber, BigNumber],
  PublicSignalsStructOutput
] & {
  a: [BigNumber, BigNumber];
  b: [[BigNumber, BigNumber], [BigNumber, BigNumber]];
  c: [BigNumber, BigNumber];
  publicSignals: PublicSignalsStructOutput;
};

export type PublicInfoStruct = {
  maxAllowableFeeRate: PromiseOrValue<BigNumberish>;
  recipient: PromiseOrValue<string>;
  token: PromiseOrValue<string>;
  deadline: PromiseOrValue<BigNumberish>;
};

export type PublicInfoStructOutput = [number, string, string] & {
  maxAllowableFeeRate: number;
  recipient: string;
  token: string;
};

export interface CipherInterface extends utils.Interface {
  functions: {
    "createTx((uint256[2],uint256[2][2],uint256[2],(uint256,uint256,uint256,uint256,uint256[],uint256[])),(uint16,address,address))": FunctionFragment;
    "createTxWithRelayer((uint256[2],uint256[2][2],uint256[2],(uint256,uint256,uint256,uint256,uint256[],uint256[])),(uint16,address,address),(address,address,uint16))": FunctionFragment;
    "getTreeDepth(address)": FunctionFragment;
    "getTreeLastSubtrees(address,uint256)": FunctionFragment;
    "getTreeLeafNum(address)": FunctionFragment;
    "getTreeRoot(address)": FunctionFragment;
    "getTreeZeroes(address,uint256)": FunctionFragment;
    "getVerifier()": FunctionFragment;
    "initTokenTree(address)": FunctionFragment;
    "isNullified(address,uint256)": FunctionFragment;
    "isValidRoot(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerAsRelayer(string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateRelayerMetadataUri(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createTx"
      | "createTxWithRelayer"
      | "getTreeDepth"
      | "getTreeLastSubtrees"
      | "getTreeLeafNum"
      | "getTreeRoot"
      | "getTreeZeroes"
      | "getVerifier"
      | "initTokenTree"
      | "isNullified"
      | "isValidRoot"
      | "owner"
      | "registerAsRelayer"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateRelayerMetadataUri"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createTx",
    values: [ProofStruct, PublicInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createTxWithRelayer",
    values: [ProofStruct, PublicInfoStruct, RelayerInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreeDepth",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreeLastSubtrees",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreeLeafNum",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreeRoot",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreeZeroes",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initTokenTree",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isNullified",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidRoot",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerAsRelayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRelayerMetadataUri",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "createTx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createTxWithRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreeDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreeLastSubtrees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreeLeafNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreeRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreeZeroes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initTokenTree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNullified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAsRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRelayerMetadataUri",
    data: BytesLike
  ): Result;

  events: {
    "NewCommitment(address,uint256,uint256)": EventFragment;
    "NewNullifier(address,uint256)": EventFragment;
    "NewRelayer(address,string)": EventFragment;
    "NewRoot(address,uint256)": EventFragment;
    "NewTokenTree(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RelayInfo(address,tuple,uint256)": EventFragment;
    "RelayerUpdated(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewCommitment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewNullifier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRelayer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRoot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTokenTree"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerUpdated"): EventFragment;
}

export interface NewCommitmentEventObject {
  token: string;
  commitment: BigNumber;
  leafIndex: BigNumber;
}
export type NewCommitmentEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  NewCommitmentEventObject
>;

export type NewCommitmentEventFilter = TypedEventFilter<NewCommitmentEvent>;

export interface NewNullifierEventObject {
  token: string;
  nullifier: BigNumber;
}
export type NewNullifierEvent = TypedEvent<
  [string, BigNumber],
  NewNullifierEventObject
>;

export type NewNullifierEventFilter = TypedEventFilter<NewNullifierEvent>;

export interface NewRelayerEventObject {
  relayer: string;
  relayerMetadataUri: string;
}
export type NewRelayerEvent = TypedEvent<
  [string, string],
  NewRelayerEventObject
>;

export type NewRelayerEventFilter = TypedEventFilter<NewRelayerEvent>;

export interface NewRootEventObject {
  token: string;
  root: BigNumber;
}
export type NewRootEvent = TypedEvent<[string, BigNumber], NewRootEventObject>;

export type NewRootEventFilter = TypedEventFilter<NewRootEvent>;

export interface NewTokenTreeEventObject {
  token: string;
  merkleTreeDepth: BigNumber;
  zeroValue: BigNumber;
}
export type NewTokenTreeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  NewTokenTreeEventObject
>;

export type NewTokenTreeEventFilter = TypedEventFilter<NewTokenTreeEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RelayInfoEventObject {
  sender: string;
  relayerInfo: RelayerInfoStructOutput;
  feeAmt: BigNumber;
}
export type RelayInfoEvent = TypedEvent<
  [string, RelayerInfoStructOutput, BigNumber],
  RelayInfoEventObject
>;

export type RelayInfoEventFilter = TypedEventFilter<RelayInfoEvent>;

export interface RelayerUpdatedEventObject {
  relayer: string;
  newRelayerMetadataUri: string;
}
export type RelayerUpdatedEvent = TypedEvent<
  [string, string],
  RelayerUpdatedEventObject
>;

export type RelayerUpdatedEventFilter = TypedEventFilter<RelayerUpdatedEvent>;

export interface Cipher extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CipherInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createTx(
      proof: ProofStruct,
      publicInfo: PublicInfoStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createTxWithRelayer(
      proof: ProofStruct,
      publicInfo: PublicInfoStruct,
      relayerInfo: RelayerInfoStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTreeDepth(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTreeLastSubtrees(
      token: PromiseOrValue<string>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber]]>;

    getTreeLeafNum(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTreeRoot(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTreeZeroes(
      token: PromiseOrValue<string>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVerifier(overrides?: CallOverrides): Promise<[string]>;

    initTokenTree(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isNullified(
      token: PromiseOrValue<string>,
      nullifier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidRoot(
      token: PromiseOrValue<string>,
      root: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerAsRelayer(
      relayerMetadataUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRelayerMetadataUri(
      newRelayerMetadataUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createTx(
    proof: ProofStruct,
    publicInfo: PublicInfoStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createTxWithRelayer(
    proof: ProofStruct,
    publicInfo: PublicInfoStruct,
    relayerInfo: RelayerInfoStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTreeDepth(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTreeLastSubtrees(
    token: PromiseOrValue<string>,
    level: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getTreeLeafNum(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTreeRoot(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTreeZeroes(
    token: PromiseOrValue<string>,
    level: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVerifier(overrides?: CallOverrides): Promise<string>;

  initTokenTree(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isNullified(
    token: PromiseOrValue<string>,
    nullifier: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidRoot(
    token: PromiseOrValue<string>,
    root: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerAsRelayer(
    relayerMetadataUri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRelayerMetadataUri(
    newRelayerMetadataUri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createTx(
      proof: ProofStruct,
      publicInfo: PublicInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createTxWithRelayer(
      proof: ProofStruct,
      publicInfo: PublicInfoStruct,
      relayerInfo: RelayerInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getTreeDepth(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreeLastSubtrees(
      token: PromiseOrValue<string>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getTreeLeafNum(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreeRoot(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreeZeroes(
      token: PromiseOrValue<string>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVerifier(overrides?: CallOverrides): Promise<string>;

    initTokenTree(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isNullified(
      token: PromiseOrValue<string>,
      nullifier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidRoot(
      token: PromiseOrValue<string>,
      root: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerAsRelayer(
      relayerMetadataUri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRelayerMetadataUri(
      newRelayerMetadataUri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewCommitment(address,uint256,uint256)"(
      token?: PromiseOrValue<string> | null,
      commitment?: null,
      leafIndex?: null
    ): NewCommitmentEventFilter;
    NewCommitment(
      token?: PromiseOrValue<string> | null,
      commitment?: null,
      leafIndex?: null
    ): NewCommitmentEventFilter;

    "NewNullifier(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      nullifier?: null
    ): NewNullifierEventFilter;
    NewNullifier(
      token?: PromiseOrValue<string> | null,
      nullifier?: null
    ): NewNullifierEventFilter;

    "NewRelayer(address,string)"(
      relayer?: PromiseOrValue<string> | null,
      relayerMetadataUri?: null
    ): NewRelayerEventFilter;
    NewRelayer(
      relayer?: PromiseOrValue<string> | null,
      relayerMetadataUri?: null
    ): NewRelayerEventFilter;

    "NewRoot(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      root?: null
    ): NewRootEventFilter;
    NewRoot(
      token?: PromiseOrValue<string> | null,
      root?: null
    ): NewRootEventFilter;

    "NewTokenTree(address,uint256,uint256)"(
      token?: PromiseOrValue<string> | null,
      merkleTreeDepth?: null,
      zeroValue?: null
    ): NewTokenTreeEventFilter;
    NewTokenTree(
      token?: PromiseOrValue<string> | null,
      merkleTreeDepth?: null,
      zeroValue?: null
    ): NewTokenTreeEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RelayInfo(address,tuple,uint256)"(
      sender?: null,
      relayerInfo?: null,
      feeAmt?: null
    ): RelayInfoEventFilter;
    RelayInfo(
      sender?: null,
      relayerInfo?: null,
      feeAmt?: null
    ): RelayInfoEventFilter;

    "RelayerUpdated(address,string)"(
      relayer?: PromiseOrValue<string> | null,
      newRelayerMetadataUri?: null
    ): RelayerUpdatedEventFilter;
    RelayerUpdated(
      relayer?: PromiseOrValue<string> | null,
      newRelayerMetadataUri?: null
    ): RelayerUpdatedEventFilter;
  };

  estimateGas: {
    createTx(
      proof: ProofStruct,
      publicInfo: PublicInfoStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createTxWithRelayer(
      proof: ProofStruct,
      publicInfo: PublicInfoStruct,
      relayerInfo: RelayerInfoStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTreeDepth(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreeLastSubtrees(
      token: PromiseOrValue<string>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreeLeafNum(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreeRoot(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreeZeroes(
      token: PromiseOrValue<string>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    initTokenTree(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isNullified(
      token: PromiseOrValue<string>,
      nullifier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidRoot(
      token: PromiseOrValue<string>,
      root: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerAsRelayer(
      relayerMetadataUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRelayerMetadataUri(
      newRelayerMetadataUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createTx(
      proof: ProofStruct,
      publicInfo: PublicInfoStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createTxWithRelayer(
      proof: ProofStruct,
      publicInfo: PublicInfoStruct,
      relayerInfo: RelayerInfoStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTreeDepth(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreeLastSubtrees(
      token: PromiseOrValue<string>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreeLeafNum(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreeRoot(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreeZeroes(
      token: PromiseOrValue<string>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initTokenTree(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isNullified(
      token: PromiseOrValue<string>,
      nullifier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidRoot(
      token: PromiseOrValue<string>,
      root: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerAsRelayer(
      relayerMetadataUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRelayerMetadataUri(
      newRelayerMetadataUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
